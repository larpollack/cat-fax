/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 scene.gltf
Author: dinomaster (https://sketchfab.com/dinomaster)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-bengal-cat-30444a1c97e9411693023c75403b38d8
Title: animated bengal cat
*/

import React, { useRef, useEffect, useLayoutEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import { useThree } from "@react-three/fiber";

export function Model(props) {
  const group = useRef();
  const { scene, nodes, materials, animations } = useGLTF("/scene.gltf", true);
  const { actions, mixer } = useAnimations(animations, group);
  // const action = actions["All Animations"];

  let camera = useThree((state) => state.camera);
  let scenic = useThree((state) => state.scene);

  useLayoutEffect(() => {
    let t1 = gsap.timeline({
      scrollTrigger: {
        trigger: "#cat-model",
        start: "top top",
        // markers: true,
        end: "bottom bottom",
        endTrigger: ".footerSection",
        scrub: true,
      },
    });

    t1.set(camera.position, { x: 1.2 })
      .fromTo(camera.position, { y: 3 }, { y: 0 })
      .to(camera.position, { x: -1.5 })
      .to(scenic.rotation, { x: 0.8 })
      .to(scenic.rotation, { x: 5 })
      .to(camera.position, { x: 0.5 });
  }, []);

  useEffect(() => {
    actions["All Animations"].play();
  }, [mixer, actions]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Sketchfab_model_0" rotation={[-Math.PI / 2, 0, 0]}>
                <group name="root_1">
                  <group
                    name="GLTF_SceneRootNode_2"
                    rotation={[Math.PI / 2, 0, 0]}
                  >
                    <group
                      name="Sketchfab_model_0_3"
                      rotation={[-Math.PI / 2, 0, 0]}
                      scale={1.82}
                    >
                      <group name="root_1_4">
                        <group
                          name="GLTF_SceneRootNode_2_5"
                          rotation={[Math.PI / 2, 0, 0]}
                        >
                          <group name="GLTF_created_0_3_6">
                            <group name="GLTF_created_0_7">
                              <group name="GLTF_created_0">
                                <primitive
                                  object={nodes.GLTF_created_0_rootJoint}
                                />
                                <group name="Object_103_103_correction">
                                  <group name="Object_103_103" />
                                </group>
                                <skinnedMesh
                                  name="Object_108"
                                  geometry={nodes.Object_108.geometry}
                                  material={
                                    materials.GoogleAR_StingrayPBS_StingrayPBS
                                  }
                                  skeleton={nodes.Object_108.skeleton}
                                />
                              </group>
                            </group>
                          </group>
                        </group>
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/scene.gltf");
